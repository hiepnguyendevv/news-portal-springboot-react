package com.news.news_services.service;

import com.news.news_services.entity.News;
import com.news.news_services.entity.Category;
import com.news.news_services.entity.User;
import com.news.news_services.repository.NewsRepository;
import com.news.news_services.repository.CategoryRepository;
import com.news.news_services.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.http.ResponseEntity;

import org.springframework.web.bind.annotation.*;

import com.news.news_services.service.HelperService;

import java.time.LocalDateTime;
import java.util.List;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.ThreadLocalRandom;

@Service
public class NewsService {

    @Autowired
    private HelperService helperService;

    @Autowired
    private NewsRepository newsRepository;

    @Autowired
    private CategoryRepository categoryRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    public List<News> getAllNews() {
        return newsRepository.findAll();
    }

    // L·∫•y tin t·ª©c theo ID
    public News getNewsById(Long id) {
        Optional<News> news = newsRepository.findById(id);
        return news.orElse(null);
    }

    // L·∫•y tin t·ª©c ƒë√£ xu·∫•t b·∫£n
    public List<News> getPublishedNews() {
        return newsRepository.findByPublishedTrueOrderByCreatedAtDesc();
    }

    // L·∫•y tin t·ª©c theo category
    public List<News> getNewsByCategory(String categoryName) {
        return newsRepository.findByCategoryNameAndPublishedTrueOrderByCreatedAtDesc(categoryName);
    }

    // L·∫•y tin t·ª©c theo category slug
    public List<News> getNewsByCategorySlug(String categorySlug) {
        return newsRepository.findByCategorySlugAndPublishedTrueOrderByCreatedAtDesc(categorySlug);
    }

    // T√¨m ki·∫øm tin t·ª©c
    public List<News> searchNews(String keyword) {
        return newsRepository.searchByKeyword(keyword);
    }

    // X√≥a t·∫•t c·∫£ tin t·ª©c
    public Map<String, Object> clearAllNews() {
        Map<String, Object> response = new HashMap<>();
        try {
            long count = newsRepository.count();
            newsRepository.deleteAll();

            response.put("success", true);
            response.put("message", "ƒê√£ x√≥a t·∫•t c·∫£ d·ªØ li·ªáu!");
        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "L·ªói khi x√≥a: " + e.getMessage());
        }
        return response;
    }

    public Map<String, Object> importSampleData() {
        Map<String, Object> response = new HashMap<>();
        try {
            long countBefore = newsRepository.count();

            createSimpleSampleData();

            long countAfter = newsRepository.count();
            long addedCount = countAfter - countBefore;

            response.put("success", true);
            response.put("message", "‚úÖ Import d·ªØ li·ªáu th√†nh c√¥ng!");
            response.put("totalBefore", countBefore);
            response.put("totalAfter", countAfter);
            response.put("addedCount", addedCount);
        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "‚ùå L·ªói khi import: " + e.getMessage());
        }
        return response;
    }


    @Transactional
    private void createSimpleSampleData() {
        // üîê T·∫°o user admin v·ªõi m·∫≠t kh·∫©u ƒë√£ m√£ h√≥a
        User admin = userRepository.findByUsername("admin")
                .orElseGet(() -> {
                    User user = new User();
                    user.setUsername("admin");
                    user.setEmail("admin@news.com");
                    user.setPassword(passwordEncoder.encode("admin123")); // üîß M√£ h√≥a m·∫≠t kh·∫©u
                    user.setFullName("Qu·∫£n tr·ªã vi√™n");
                    user.setRole(User.UserRole.ADMIN);
                    user.setStatus(User.UserStatus.ACTIVE);
                    return userRepository.save(user);
                });


        Category techCategory = findOrCreateCategory("C√¥ng ngh·ªá", "Tin t·ª©c c√¥ng ngh·ªá", null);
        Category aiCategory = findOrCreateCategory("Tr√≠ tu·ªá nh√¢n t·∫°o", "Tin t·ª©c v·ªÅ AI v√† Machine Learning", techCategory);
        Category mobileCategory = findOrCreateCategory("Di ƒë·ªông", "Tin t·ª©c v·ªÅ ƒëi·ªán tho·∫°i v√† thi·∫øt b·ªã di ƒë·ªông", techCategory);

        Category sportsCategory = findOrCreateCategory("Th·ªÉ thao", "Tin t·ª©c th·ªÉ thao", null);
        Category footballCategory = findOrCreateCategory("B√≥ng ƒë√°", "Tin t·ª©c b√≥ng ƒë√° trong n∆∞·ªõc v√† qu·ªëc t·∫ø", sportsCategory);
        Category tennisCategory = findOrCreateCategory("Tennis", "Tin t·ª©c tennis", sportsCategory);

        Category economyCategory = findOrCreateCategory("Kinh t·∫ø", "Tin t·ª©c kinh t·∫ø", null);
        Category stockCategory = findOrCreateCategory("Ch·ª©ng kho√°n", "Tin t·ª©c th·ªã tr∆∞·ªùng ch·ª©ng kho√°n", economyCategory);
        Category cryptoCategory = findOrCreateCategory("Ti·ªÅn ƒëi·ªán t·ª≠", "Tin t·ª©c v·ªÅ Bitcoin v√† c√°c lo·∫°i ti·ªÅn ƒëi·ªán t·ª≠", economyCategory);


// ====== TIN C√îNG NGH·ªÜ ======
        createSampleNews("Th·ªã tr∆∞·ªùng c√¥ng ngh·ªá Vi·ªát Nam tƒÉng tr∆∞·ªüng m·∫°nh trong Q3",
                "B√°o c√°o t·ª´ B·ªô TT&TT cho th·∫•y xu h∆∞·ªõng t√≠ch c·ª±c",
                "Theo b√°o c√°o m·ªõi nh·∫•t t·ª´ B·ªô Th√¥ng tin v√† Truy·ªÅn th√¥ng, th·ªã tr∆∞·ªùng c√¥ng ngh·ªá Vi·ªát Nam ƒë√£ ghi nh·∫≠n m·ª©c tƒÉng tr∆∞·ªüng 15.2% trong qu√Ω 3 nƒÉm 2024. C√°c lƒ©nh v·ª±c fintech, e-commerce v√† c√¥ng ngh·ªá gi√°o d·ª•c d·∫´n ƒë·∫ßu v·ªÅ t·ªëc ƒë·ªô ph√°t tri·ªÉn.",
                techCategory, admin);

        createSampleNews("Vi·ªát Nam ƒë·ª©ng top 10 v·ªÅ chuy·ªÉn ƒë·ªïi s·ªë ASEAN",
                "Ch·ªâ s·ªë s·ªë h√≥a qu·ªëc gia ƒë∆∞·ª£c c·∫£i thi·ªán ƒë√°ng k·ªÉ",
                "Trong b·∫£ng x·∫øp h·∫°ng chuy·ªÉn ƒë·ªïi s·ªë ASEAN 2024, Vi·ªát Nam ƒë√£ leo l√™n v·ªã tr√≠ th·ª© 6, tƒÉng 2 b·∫≠c so v·ªõi nƒÉm tr∆∞·ªõc. C√°c y·∫øu t·ªë nh∆∞ h·∫° t·∫ßng k·ªπ thu·∫≠t s·ªë, ch√≠nh ph·ªß ƒëi·ªán t·ª≠ v√† k·ªπ nƒÉng s·ªë c·ªßa ng∆∞·ªùi d√¢n ƒë·ªÅu c√≥ ti·∫øn b·ªô v∆∞·ª£t b·∫≠c.",
                techCategory, admin);

        createSampleNews("iPhone 16 ra m·∫Øt v·ªõi nhi·ªÅu t√≠nh nƒÉng m·ªõi",
                "Apple v·ª´a c√¥ng b·ªë iPhone 16 series v·ªõi chip A18 m·∫°nh m·∫Ω",
                "Apple ƒë√£ ch√≠nh th·ª©c ra m·∫Øt iPhone 16 series t·∫°i s·ª± ki·ªán ƒë·∫∑c bi·ªát. ƒêi·ªán tho·∫°i ƒë∆∞·ª£c trang b·ªã chip A18 m·ªõi nh·∫•t, camera ƒë∆∞·ª£c n√¢ng c·∫•p ƒë√°ng k·ªÉ v√† th·ªùi l∆∞·ª£ng pin c·∫£i thi·ªán. Gi√° kh·ªüi ƒëi·ªÉm t·ª´ 999 USD.",
                mobileCategory, admin);

        createSampleNews("Samsung Galaxy S25 l·ªô th√¥ng s·ªë k·ªπ thu·∫≠t",
                "Flagship m·ªõi c·ªßa Samsung s·∫Ω c√≥ nhi·ªÅu c·∫£i ti·∫øn",
                "Theo tin r√≤ r·ªâ m·ªõi nh·∫•t, Samsung Galaxy S25 s·∫Ω ƒë∆∞·ª£c trang b·ªã chip Snapdragon 8 Gen 4, camera ch√≠nh 200MP v√† pin 5000mAh v·ªõi s·∫°c nhanh 65W. D·ª± ki·∫øn ra m·∫Øt v√†o ƒë·∫ßu nƒÉm 2025.",
                mobileCategory, admin);

        createSampleNews("ChatGPT-5 s·∫Ω ra m·∫Øt v√†o cu·ªëi nƒÉm 2024",
                "OpenAI chu·∫©n b·ªã c√¥ng b·ªë phi√™n b·∫£n ChatGPT m·ªõi nh·∫•t",
                "OpenAI ƒë√£ x√°c nh·∫≠n r·∫±ng ChatGPT-5 s·∫Ω ƒë∆∞·ª£c ra m·∫Øt v√†o cu·ªëi nƒÉm 2024 v·ªõi nhi·ªÅu c·∫£i ti·∫øn v·ªÅ kh·∫£ nƒÉng x·ª≠ l√Ω ng√¥n ng·ªØ t·ª± nhi√™n v√† t·ªëc ƒë·ªô ph·∫£n h·ªìi. Phi√™n b·∫£n m·ªõi s·∫Ω h·ªó tr·ª£ nhi·ªÅu ng√¥n ng·ªØ h∆°n.",
                aiCategory, admin);

        createSampleNews("Google Gemini Pro c·∫°nh tranh v·ªõi ChatGPT",
                "Cu·ªôc ƒëua AI ng√†y c√†ng kh·ªëc li·ªát",
                "Google v·ª´a ra m·∫Øt Gemini Pro v·ªõi kh·∫£ nƒÉng x·ª≠ l√Ω ƒëa ph∆∞∆°ng ti·ªán v∆∞·ª£t tr·ªôi. Model AI m·ªõi n√†y c√≥ th·ªÉ hi·ªÉu v√† t·∫°o ra n·ªôi dung text, h√¨nh ·∫£nh, √¢m thanh v√† video m·ªôt c√°ch li·ªÅn m·∫°ch.",
                aiCategory, admin);

// ====== TIN TH·ªÇ THAO ======
        createSampleNews("Vi·ªát Nam ƒëƒÉng cai SEA Games 33 nƒÉm 2025",
                "L·ªÖ khai m·∫°c d·ª± ki·∫øn t·ªï ch·ª©c t·∫°i H√† N·ªôi",
                "·ª¶y ban Olympic Vi·ªát Nam ch√≠nh th·ª©c x√°c nh·∫≠n Vi·ªát Nam s·∫Ω ƒëƒÉng cai t·ªï ch·ª©c SEA Games 33 v√†o th√°ng 12/2025. ƒê√¢y l√† l·∫ßn th·ª© 2 Vi·ªát Nam ƒëƒÉng cai gi·∫£i ƒë·∫•u th·ªÉ thao l·ªõn nh·∫•t khu v·ª±c ƒê√¥ng Nam √Å.",
                sportsCategory, admin);

        createSampleNews("Th·ªÉ thao Vi·ªát Nam ƒë·∫∑t m·ª•c ti√™u top 3 t·∫°i ASIAD 2026",
                "K·∫ø ho·∫°ch ƒë·∫ßu t∆∞ 500 t·ª∑ cho th·ªÉ thao th√†nh t√≠ch cao",
                "T·ªïng c·ª•c Th·ªÉ d·ª•c Th·ªÉ thao ƒë√£ c√¥ng b·ªë k·∫ø ho·∫°ch ƒë·∫ßu t∆∞ 500 t·ª∑ ƒë·ªìng ƒë·ªÉ ph√°t tri·ªÉn th·ªÉ thao th√†nh t√≠ch cao, h∆∞·ªõng ƒë·∫øn m·ª•c ti√™u ƒë·ª©ng top 3 t·∫°i ASIAD 2026 ·ªü Nh·∫≠t B·∫£n.",
                sportsCategory, admin);

        createSampleNews("Quang H·∫£i ghi b√†n th·∫Øng ƒë·∫πp trong tr·∫≠n ƒë·∫•u",
                "Quang H·∫£i ti·∫øp t·ª•c t·ªèa s√°ng tr√™n s√¢n c·ªè",
                "Trong tr·∫≠n ƒë·∫•u t·ªëi qua, Quang H·∫£i ƒë√£ c√≥ m·ªôt b√†n th·∫Øng ƒë·∫πp m·∫Øt gi√∫p ƒë·ªôi nh√† gi√†nh chi·∫øn th·∫Øng 2-1. ƒê√¢y l√† b√†n th·∫Øng th·ª© 5 c·ªßa anh trong m√πa gi·∫£i n√†y.",
                footballCategory, admin);

        createSampleNews("ƒêT Vi·ªát Nam chu·∫©n b·ªã v√≤ng lo·∫°i World Cup 2026",
                "HLV Philippe Troussier c√¥ng b·ªë danh s√°ch s∆° b·ªô",
                "Hu·∫•n luy·ªán vi√™n Philippe Troussier ƒë√£ c√¥ng b·ªë danh s√°ch s∆° b·ªô 35 c·∫ßu th·ªß cho ƒë·ª£t t·∫≠p trung chu·∫©n b·ªã v√≤ng lo·∫°i th·ª© 3 World Cup 2026. Nhi·ªÅu g∆∞∆°ng m·∫∑t tr·∫ª ƒë∆∞·ª£c g·ªçi l√™n tuy·ªÉn.",
                footballCategory, admin);

        createSampleNews("Djokovic v√¥ ƒë·ªãch Australian Open l·∫ßn th·ª© 10",
                "Novak Djokovic ti·∫øp t·ª•c th·ªëng tr·ªã Melbourne",
                "Novak Djokovic ƒë√£ gi√†nh chi·∫øn th·∫Øng 3-0 trong tr·∫≠n chung k·∫øt Australian Open, ƒë√°nh b·∫°i ƒë·ªëi th·ªß trong 2 gi·ªù 15 ph√∫t. ƒê√¢y l√† l·∫ßn th·ª© 10 anh v√¥ ƒë·ªãch gi·∫£i ƒë·∫•u n√†y.",
                tennisCategory, admin);

        createSampleNews("L√Ω Ho√†ng Nam v√†o v√≤ng 2 Roland Garros",
                "Th√†nh t√≠ch l·ªãch s·ª≠ c·ªßa qu·∫ßn v·ª£t Vi·ªát Nam",
                "L√Ω Ho√†ng Nam ƒë√£ t·∫°o n√™n l·ªãch s·ª≠ khi tr·ªü th√†nh tay v·ª£t Vi·ªát Nam ƒë·∫ßu ti√™n v∆∞·ª£t qua v√≤ng 1 Roland Garros. Anh ƒë√°nh b·∫°i ƒë·ªëi th·ªß x·∫øp h·∫°ng 45 th·∫ø gi·ªõi sau 4 set ƒë·∫•u k·ªãch t√≠nh.",
                tennisCategory, admin);

// ====== TIN KINH T·∫æ ======
        createSampleNews("GDP Vi·ªát Nam tƒÉng 6.82% trong 9 th√°ng ƒë·∫ßu nƒÉm",
                "N·ªÅn kinh t·∫ø ph·ª•c h·ªìi m·∫°nh m·∫Ω sau kh√≥ khƒÉn",
                "T·ªïng c·ª•c Th·ªëng k√™ c√¥ng b·ªë GDP 9 th√°ng ƒë·∫ßu nƒÉm 2024 tƒÉng 6.82% so v·ªõi c√πng k·ª≥ nƒÉm tr∆∞·ªõc. ƒê√¢y l√† m·ª©c tƒÉng tr∆∞·ªüng cao nh·∫•t trong 3 nƒÉm qua, cho th·∫•y n·ªÅn kinh t·∫ø ƒëang ph·ª•c h·ªìi t√≠ch c·ª±c.",
                economyCategory, admin);

        createSampleNews("Vi·ªát Nam xu·∫•t kh·∫©u ƒë·∫°t 315 t·ª∑ USD",
                "Kim ng·∫°ch xu·∫•t kh·∫©u ti·∫øp t·ª•c tƒÉng tr∆∞·ªüng d∆∞∆°ng",
                "Theo s·ªë li·ªáu t·ª´ T·ªïng c·ª•c H·∫£i quan, kim ng·∫°ch xu·∫•t kh·∫©u c·ªßa Vi·ªát Nam trong 10 th√°ng ƒë·∫ßu nƒÉm ƒë·∫°t 315 t·ª∑ USD, tƒÉng 14.2% so v·ªõi c√πng k·ª≥. ƒêi·ªán tho·∫°i, d·ªát may v√† gi√†y d√©p d·∫´n ƒë·∫ßu v·ªÅ kim ng·∫°ch.",
                economyCategory, admin);

        createSampleNews("VN-Index tƒÉng ƒëi·ªÉm m·∫°nh trong phi√™n giao d·ªãch",
                "Ch·ª©ng kho√°n Vi·ªát Nam c√≥ phi√™n tƒÉng ƒëi·ªÉm ·∫•n t∆∞·ª£ng",
                "Th·ªã tr∆∞·ªùng ch·ª©ng kho√°n Vi·ªát Nam ƒë√£ c√≥ m·ªôt phi√™n giao d·ªãch kh·ªüi s·∫Øc v·ªõi VN-Index tƒÉng h∆°n 20 ƒëi·ªÉm. C√°c c·ªï phi·∫øu ng√¢n h√†ng v√† b·∫•t ƒë·ªông s·∫£n d·∫´n d·∫Øt th·ªã tr∆∞·ªùng tƒÉng ƒëi·ªÉm.",
                stockCategory, admin);

        createSampleNews("Vinhomes ni√™m y·∫øt th√™m 1.2 t·ª∑ c·ªï phi·∫øu",
                "ƒê·ª£t ph√°t h√†nh l·ªõn nh·∫•t th·ªã tr∆∞·ªùng nƒÉm 2024",
                "Vinhomes (VHM) ch√≠nh th·ª©c ni√™m y·∫øt b·ªï sung 1.2 t·ª∑ c·ªï phi·∫øu t·ª´ vi·ªác tr·∫£ c·ªï t·ª©c. ƒê√¢y l√† ƒë·ª£t ni√™m y·∫øt b·ªï sung l·ªõn nh·∫•t tr√™n th·ªã tr∆∞·ªùng ch·ª©ng kho√°n Vi·ªát Nam trong nƒÉm 2024.",
                stockCategory, admin);

// üí∞ Tin thu·ªôc category con "Ti·ªÅn ƒëi·ªán t·ª≠"
        createSampleNews("Bitcoin v∆∞·ª£t m·ªëc 70.000 USD",
                "Th·ªã tr∆∞·ªùng ti·ªÅn ƒëi·ªán t·ª≠ s√¥i ƒë·ªông tr·ªü l·∫°i",
                "Bitcoin ƒë√£ ch√≠nh th·ª©c v∆∞·ª£t qua m·ªëc 70.000 USD sau m·ªôt th·ªùi gian d√†i gi·∫£m gi√°. C√°c chuy√™n gia d·ª± ƒëo√°n th·ªã tr∆∞·ªùng ti·ªÅn ƒëi·ªán t·ª≠ s·∫Ω ti·∫øp t·ª•c tƒÉng tr∆∞·ªüng m·∫°nh trong qu√Ω n√†y.",
                cryptoCategory, admin);

        createSampleNews("Ethereum c·∫≠p nh·∫≠t giao th·ª©c Dencun",
                "Ph√≠ giao d·ªãch gi·∫£m ƒë√°ng k·ªÉ",
                "Ethereum ƒë√£ ho√†n t·∫•t vi·ªác c·∫≠p nh·∫≠t giao th·ª©c Dencun, gi√∫p gi·∫£m ph√≠ giao d·ªãch xu·ªëng m·ª©c th·∫•p nh·∫•t trong 2 nƒÉm qua. Vi·ªác n√†y ƒë∆∞·ª£c k·ª≥ v·ªçng s·∫Ω thu h√∫t nhi·ªÅu ng∆∞·ªùi d√πng m·ªõi tham gia h·ªá sinh th√°i.",
                cryptoCategory, admin);

    }

    private Category findOrCreateCategory(String name, String description, Category parent) {
        String slugName = helperService.toSlug(name);
        return categoryRepository.findByName(name)
                .orElseGet(() -> {
                    Category category = new Category();
                    category.setName(name);
                    category.setDescription(description);
                    category.setParent(parent); // üîó Set parent category
                    category.setLevel(parent == null ? 0 : parent.getLevel() + 1); // üìä Set level
                    category.setSlug(slugName);
                    category.setSortOrder(0);
                    category.setIsActive(true);
                    return categoryRepository.save(category);
                });
    }


    private void createSampleNews(String title, String summary, String content,
                                  Category category, User author) {
        News news = new News();
        String slugName = helperService.toSlug(title);
        int number = ThreadLocalRandom.current().nextInt(1, 2001); // 1 ‚Üí 2000
        String numImg = String.valueOf(number);
        news.setTitle(title);
        news.setSummary(summary);
        news.setContent(content);
        news.setCategory(category);
        news.setAuthor(author);
        news.setImageUrl("https://yavuzceliker.github.io/sample-images/image-"+numImg+".jpg");
        news.setSlug(slugName);
        news.setPublished(true);
        news.setFeatured(false);
        news.setCreatedAt(LocalDateTime.now());
        news.setUpdatedAt(LocalDateTime.now());
        newsRepository.save(news);
    }

    // Test k·∫øt n·ªëi database
    public String testConnection() {
        try {
            long count = newsRepository.count();
            return "K·∫øt n·ªëi MySQL th√†nh c√¥ng! C√≥ " + count + " tin t·ª©c trong database.";
        } catch (Exception e) {
            return "L·ªói k·∫øt n·ªëi: " + e.getMessage();
        }
    }
}